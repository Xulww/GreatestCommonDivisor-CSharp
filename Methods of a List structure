using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ADS_W4
{
    class ArrayList<T>
    {
        private T[] arr;

        private static readonly int INITIAL_CAPACITY = 4;
        private int count;

        public int Count
        {
            get
            {
                return count;
            }
        }

        public ArrayList()
        {
            arr = new T[INITIAL_CAPACITY];
            count = 0;
        }

        public void Insert(T item, int index)
        {
            if (index > count || index < 0)
            {
                throw new IndexOutOfRangeException("Invalid index");
            }

            T[] extendedArr = arr;

            if (count + 1 == arr.Length)
            {
                extendedArr = new T[arr.Length * 2];
            }

            for (int i = 0; i < index; i++)
            {
                extendedArr[i] = arr[i];
            }

            extendedArr[index] = item;

            for (int i = index + 1; i < count; i++)
            {
                extendedArr[i] = arr[i - 1];
            }

            arr = extendedArr;
            count++;
        }

        public void Add(T item)
        {
            Insert(item, count);
        }

        public int IndexOf(T item)
        {
            for (int i = 0; i < arr.Length; i++)
            {
                if (arr[i].Equals(item))
                { 
                    return i;
                }
            }

            return -1;
        }

        public void Clear()
        {
            arr = new T[INITIAL_CAPACITY];
            count = 0;
        }

        public bool Contains(T item)
        {
            for (int i = 0; i < arr.Length; i++)
            {
                if (arr[i].Equals(item))
                {
                    return true;
                }              
            }

            return false;
        }

        public T this[int index]
        {
            get
            {
                if (index > count || index < 0)
                {
                    throw new IndexOutOfRangeException("Invalid index");
                }

                return arr[index];
            }

            set
            {
                if (index > count || index < 0)
                {
                    throw new IndexOutOfRangeException("Invalid index");
                }

                arr[index] = value;
            }
        }

        public T Remove(int index)
        {
            if (index > count || index < 0)
            {
                throw new IndexOutOfRangeException("Invalid index");
            }

            T returnValue = arr[index];

            for (int i = index; i < count - 1; i++)
            {
                arr[i] = arr[i + 1];    
            }

            arr[count - 1] = default(T);
            count--;

            return returnValue;
        }

        public int Remove(T item)
        {
            for (int i = 0; i < count; i++)
            {
                if (arr[i].Equals(item))
                {
                    Remove(i);
                    return i;
                }               
            }

            return -1;
        }
    }
}
